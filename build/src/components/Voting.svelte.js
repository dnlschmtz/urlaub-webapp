/* generated by Svelte v3.42.3 */
import {
	SvelteComponent,
	append_hydration,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert_hydration,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "https://cdn.skypack.dev/svelte@3.44.1/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i].name;
	child_ctx[3] = list[i].count;
	child_ctx[5] = i;
	return child_ctx;
}

// (17:0) {#each votes as {name, count}
function create_each_block(ctx) {
	let p;
	let t0_value = /*name*/ ctx[2] + "";
	let t0;
	let t1;
	let t2_value = /*count*/ ctx[3] + "";
	let t2;
	let t3;
	let t4;
	let input;

	return {
		c() {
			p = element("p");
			t0 = text(t0_value);
			t1 = text(" - ");
			t2 = text(t2_value);
			t3 = text(" Stimmen");
			t4 = space();
			input = element("input");
			this.h();
		},
		l(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, t0_value);
			t1 = claim_text(p_nodes, " - ");
			t2 = claim_text(p_nodes, t2_value);
			t3 = claim_text(p_nodes, " Stimmen");
			p_nodes.forEach(detach);
			t4 = claim_space(nodes);
			input = claim_element(nodes, "INPUT", { type: true, id: true });
			this.h();
		},
		h() {
			attr(input, "type", "radio");
			attr(input, "id", "vote");
		},
		m(target, anchor) {
			insert_hydration(target, p, anchor);
			append_hydration(p, t0);
			append_hydration(p, t1);
			append_hydration(p, t2);
			append_hydration(p, t3);
			insert_hydration(target, t4, anchor);
			insert_hydration(target, input, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*votes*/ 1 && t0_value !== (t0_value = /*name*/ ctx[2] + "")) set_data(t0, t0_value);
			if (dirty & /*votes*/ 1 && t2_value !== (t2_value = /*count*/ ctx[3] + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t4);
			if (detaching) detach(input);
		}
	};
}

function create_fragment(ctx) {
	let each_1_anchor;
	let each_value = /*votes*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*votes*/ 1) {
				each_value = /*votes*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let votes = [];

	function create(targets) {
		$$invalidate(0, votes = []);

		targets.forEach(element => {
			votes.push({ name: element.name, count: element.votes });
		});
	}

	return [votes, create];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { create: 1 });
	}

	get create() {
		return this.$$.ctx[1];
	}
}

export default Component;