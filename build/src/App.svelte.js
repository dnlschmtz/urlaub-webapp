/* generated by Svelte v3.42.3 */
import {
	SvelteComponent,
	append_hydration,
	append_styles,
	attr,
	binding_callbacks,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert_hydration,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "https://cdn.skypack.dev/svelte@3.44.1/internal";

import { onMount } from 'https://cdn.skypack.dev/svelte@3.44.1/internal';
import MapView from './components/MapView.svelte.js';
import Timeline from './components/Timeline.svelte.js';

function add_css(target) {
	append_styles(target, "svelte-14l9no9", "@import url('https://fonts.googleapis.com/css2?family=Raleway:wght@100&family=Roboto&display=swap');body{margin:0px;font-family:sans-serif}header.svelte-14l9no9{background-color:#1e2427;display:inline-flex;width:100%;min-height:500px;height:65vh;color:#fff}.title.svelte-14l9no9{font-size:5rem;font-weight:200;margin-bottom:0px;text-transform:uppercase;font-family:\"Raleway\"}.group-name.svelte-14l9no9{font-size:5rem;margin-top:0px;margin-bottom:3rem;text-transform:uppercase;font-family:\"Roboto\"}.small-title.svelte-14l9no9{font-size:1.7rem;margin-bottom:20px;text-transform:uppercase;font-family:\"Raleway\"}.content.svelte-14l9no9{width:100%;max-width:1200px;margin:auto}.left.svelte-14l9no9{width:50%;float:left}.right.svelte-14l9no9{width:50%;float:right}.description.svelte-14l9no9{background-color:#1e2427;font-family:\"Roboto\";font-size:1.5rem;text-align:justify;color:#fff;padding:10px;width:100%;height:280px}.gray-bg.svelte-14l9no9{width:100%;padding:50px 0px;background-color:#e5e5e5;margin-bottom:50px}.map.svelte-14l9no9{width:100%;height:420px}.timeline.svelte-14l9no9{height:420px;width:100%}@media only screen and (max-width: 1220px){body{font-size:12px}.content.svelte-14l9no9{margin:0px 20px}}");
}

function create_fragment(ctx) {
	let mapview;
	let t0;
	let timeline_1;
	let t1;
	let header;
	let div2;
	let div0;
	let h20;
	let t2;
	let t3;
	let h21;
	let t4;
	let t5;
	let div1;
	let textarea;
	let t6;
	let div6;
	let div5;
	let div3;
	let t7;
	let div4;
	let t8;
	let h30;
	let t9;
	let t10;
	let div8;
	let h31;
	let t11;
	let t12;
	let div7;
	let current;
	let mapview_props = {};
	mapview = new MapView({ props: mapview_props });
	/*mapview_binding*/ ctx[4](mapview);
	let timeline_1_props = {};
	timeline_1 = new Timeline({ props: timeline_1_props });
	/*timeline_1_binding*/ ctx[5](timeline_1);

	return {
		c() {
			create_component(mapview.$$.fragment);
			t0 = space();
			create_component(timeline_1.$$.fragment);
			t1 = space();
			header = element("header");
			div2 = element("div");
			div0 = element("div");
			h20 = element("h2");
			t2 = text("Eure Reise");
			t3 = space();
			h21 = element("h2");
			t4 = text(/*groupName*/ ctx[2]);
			t5 = space();
			div1 = element("div");
			textarea = element("textarea");
			t6 = space();
			div6 = element("div");
			div5 = element("div");
			div3 = element("div");
			t7 = space();
			div4 = element("div");
			t8 = space();
			h30 = element("h3");
			t9 = text("Stimme f체r ein Reiseziel");
			t10 = space();
			div8 = element("div");
			h31 = element("h3");
			t11 = text("Wann kann wer?");
			t12 = space();
			div7 = element("div");
			this.h();
		},
		l(nodes) {
			claim_component(mapview.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(timeline_1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			header = claim_element(nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			div2 = claim_element(header_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h20 = claim_element(div0_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t2 = claim_text(h20_nodes, "Eure Reise");
			h20_nodes.forEach(detach);
			t3 = claim_space(div0_nodes);
			h21 = claim_element(div0_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t4 = claim_text(h21_nodes, /*groupName*/ ctx[2]);
			h21_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t5 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			textarea = claim_element(div1_nodes, "TEXTAREA", { class: true });
			children(textarea).forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t6 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div3 = claim_element(div5_nodes, "DIV", { class: true, id: true });
			children(div3).forEach(detach);
			t7 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div4_nodes.forEach(detach);
			t8 = claim_space(div5_nodes);
			h30 = claim_element(div5_nodes, "H3", { class: true });
			var h30_nodes = children(h30);
			t9 = claim_text(h30_nodes, "Stimme f체r ein Reiseziel");
			h30_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			t10 = claim_space(nodes);
			div8 = claim_element(nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			h31 = claim_element(div8_nodes, "H3", { class: true });
			var h31_nodes = children(h31);
			t11 = claim_text(h31_nodes, "Wann kann wer?");
			h31_nodes.forEach(detach);
			t12 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true, id: true });
			children(div7).forEach(detach);
			div8_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h20, "class", "title svelte-14l9no9");
			attr(h21, "class", "group-name svelte-14l9no9");
			attr(div0, "class", "left svelte-14l9no9");
			attr(textarea, "class", "description svelte-14l9no9");
			textarea.value = /*description*/ ctx[3];
			attr(div1, "class", "right svelte-14l9no9");
			attr(div2, "class", "content svelte-14l9no9");
			attr(header, "class", "svelte-14l9no9");
			attr(div3, "class", "map svelte-14l9no9");
			attr(div3, "id", "map");
			attr(div4, "class", "targets");
			attr(h30, "class", "small-title svelte-14l9no9");
			attr(div5, "class", "content svelte-14l9no9");
			attr(div6, "class", "gray-bg svelte-14l9no9");
			attr(h31, "class", "small-title svelte-14l9no9");
			attr(div7, "class", "timeline svelte-14l9no9");
			attr(div7, "id", "timeline");
			attr(div8, "class", "content svelte-14l9no9");
		},
		m(target, anchor) {
			mount_component(mapview, target, anchor);
			insert_hydration(target, t0, anchor);
			mount_component(timeline_1, target, anchor);
			insert_hydration(target, t1, anchor);
			insert_hydration(target, header, anchor);
			append_hydration(header, div2);
			append_hydration(div2, div0);
			append_hydration(div0, h20);
			append_hydration(h20, t2);
			append_hydration(div0, t3);
			append_hydration(div0, h21);
			append_hydration(h21, t4);
			append_hydration(div2, t5);
			append_hydration(div2, div1);
			append_hydration(div1, textarea);
			insert_hydration(target, t6, anchor);
			insert_hydration(target, div6, anchor);
			append_hydration(div6, div5);
			append_hydration(div5, div3);
			append_hydration(div5, t7);
			append_hydration(div5, div4);
			append_hydration(div5, t8);
			append_hydration(div5, h30);
			append_hydration(h30, t9);
			insert_hydration(target, t10, anchor);
			insert_hydration(target, div8, anchor);
			append_hydration(div8, h31);
			append_hydration(h31, t11);
			append_hydration(div8, t12);
			append_hydration(div8, div7);
			current = true;
		},
		p(ctx, [dirty]) {
			const mapview_changes = {};
			mapview.$set(mapview_changes);
			const timeline_1_changes = {};
			timeline_1.$set(timeline_1_changes);
			if (!current || dirty & /*groupName*/ 4) set_data(t4, /*groupName*/ ctx[2]);

			if (!current || dirty & /*description*/ 8) {
				textarea.value = /*description*/ ctx[3];
			}
		},
		i(local) {
			if (current) return;
			transition_in(mapview.$$.fragment, local);
			transition_in(timeline_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(mapview.$$.fragment, local);
			transition_out(timeline_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			/*mapview_binding*/ ctx[4](null);
			destroy_component(mapview, detaching);
			if (detaching) detach(t0);
			/*timeline_1_binding*/ ctx[5](null);
			destroy_component(timeline_1, detaching);
			if (detaching) detach(t1);
			if (detaching) detach(header);
			if (detaching) detach(t6);
			if (detaching) detach(div6);
			if (detaching) detach(t10);
			if (detaching) detach(div8);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let mapView, timeline, webSocket;
	let groupName = "L채dt...";
	let description = "L채dt...";

	onMount(function () {
		webSocket = new WebSocket("ws://localhost:3000/ws");
		const urlParams = new URLSearchParams(window.location.search);
		const id = urlParams.get("id");
		let initial = true;

		webSocket.addEventListener("open", () => {
			webSocket.send("fetch-group " + id);
		});

		webSocket.addEventListener("message", function (event) {
			if (!initial) {
				return;
			}

			initial = false;
			console.log(event.data);
			const group = JSON.parse(event.data);
			$$invalidate(2, groupName = group.name);
			$$invalidate(3, description = group.description);
			mapView.create();
			timeline.create();
		});
	});

	function mapview_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			mapView = $$value;
			$$invalidate(0, mapView);
		});
	}

	function timeline_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			timeline = $$value;
			$$invalidate(1, timeline);
		});
	}

	return [mapView, timeline, groupName, description, mapview_binding, timeline_1_binding];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css);
	}
}

export default Component;