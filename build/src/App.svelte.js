/* generated by Svelte v3.42.3 */
import {
	SvelteComponent,
	append_hydration,
	append_styles,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert_hydration,
	noop,
	safe_not_equal,
	space,
	text
} from "https://cdn.skypack.dev/svelte@3.44.1/internal";

import { onMount } from 'https://cdn.skypack.dev/svelte@3.44.1/internal';

function add_css(target) {
	append_styles(target, "svelte-15hz5te", "@import url('https://fonts.googleapis.com/css2?family=Raleway:wght@100&family=Roboto&display=swap');body{margin:0px;font-family:sans-serif}header.svelte-15hz5te{background-color:#202020;display:inline-flex;margin-bottom:50px;width:100%;min-height:500px;height:65vh;color:#fff}.title.svelte-15hz5te{font-size:5rem;font-weight:200;margin-bottom:0px;text-transform:uppercase;font-family:\"Raleway\"}.group-name.svelte-15hz5te{font-size:5rem;margin-top:0px;margin-bottom:3rem;text-transform:uppercase;font-family:\"Roboto\"}.content.svelte-15hz5te{width:100%;max-width:1200px;margin:auto}.map.svelte-15hz5te{width:100%;height:420px}@media only screen and (max-width: 1220px){.content.svelte-15hz5te{margin:20px 0px}}");
}

function create_fragment(ctx) {
	let header;
	let div0;
	let h20;
	let t0;
	let t1;
	let h21;
	let t2;
	let t3;
	let div2;
	let div1;

	return {
		c() {
			header = element("header");
			div0 = element("div");
			h20 = element("h2");
			t0 = text("Eure Reise");
			t1 = space();
			h21 = element("h2");
			t2 = text(groupName);
			t3 = space();
			div2 = element("div");
			div1 = element("div");
			this.h();
		},
		l(nodes) {
			header = claim_element(nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			div0 = claim_element(header_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h20 = claim_element(div0_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, "Eure Reise");
			h20_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			h21 = claim_element(div0_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t2 = claim_text(h21_nodes, groupName);
			h21_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t3 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true, id: true });
			children(div1).forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h20, "class", "title svelte-15hz5te");
			attr(h21, "class", "group-name svelte-15hz5te");
			attr(div0, "class", "content svelte-15hz5te");
			attr(header, "class", "svelte-15hz5te");
			attr(div1, "class", "map svelte-15hz5te");
			attr(div1, "id", "map");
			attr(div2, "class", "content svelte-15hz5te");
		},
		m(target, anchor) {
			insert_hydration(target, header, anchor);
			append_hydration(header, div0);
			append_hydration(div0, h20);
			append_hydration(h20, t0);
			append_hydration(div0, t1);
			append_hydration(div0, h21);
			append_hydration(h21, t2);
			insert_hydration(target, t3, anchor);
			insert_hydration(target, div2, anchor);
			append_hydration(div2, div1);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(header);
			if (detaching) detach(t3);
			if (detaching) detach(div2);
		}
	};
}

let groupName = "Testgruppe";

function instance($$self) {
	function create() {
		const markerLoc = [[49.4887, 8.4658]];
		const initialView = [49.4887, 8.4658];
		let map;

		onMount(async () => {
			map = L.map("map").setView(initialView, 7);

			L.tileLayer("https://a.tile.openstreetmap.org/{z}/{x}/{y}.png ", {
				attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
				maxZoom: 18
			}).addTo(map);
		});
	}

	create();
	return [];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css);
	}
}

export default Component;